package ddukddak;

public class Engine {
    private final static int[][] distribution = {
        { 5,  5,  5,  5,  5,  5, 10, 20, 20, 20}, //141
        { 5,  5,  5,  5,  5, 10, 10, 20, 20, 15}, //142
        { 5,  5,  5,  5,  5, 10, 20, 15, 15, 15}, //143
        { 5,  5,  5,  5,  5, 20, 10, 15, 15, 15}, //144
        { 5,  5,  5, 10, 10, 10, 10, 15, 15, 15}, //145
        { 5,  5,  5, 10, 10, 10, 15, 15, 15, 10}, //146
        { 5,  5,  5, 10, 10, 15, 15, 15, 10, 10}, //147
        { 5,  5,  5, 10, 15, 15, 15, 10, 10, 10}, //148
        { 5,  5, 10, 10, 15, 15, 10, 10, 10, 10}, //149
        { 5,  5, 10, 15, 10, 15, 10, 10, 10, 10}, //150
        { 5,  5, 10, 10, 15, 20, 10, 10, 10,  5}, //151
        { 5,  5, 10, 10, 20, 15, 15, 10,  5,  5}, //152
        { 5,  5, 10, 15, 15, 20, 10, 10,  5,  5}, //153
        { 5,  5, 10, 20, 20, 10, 10, 10,  5,  5}, //154
        { 5, 10, 10, 20, 15, 10, 10, 10,  5,  5}, //155
        {10, 10, 10, 15, 15, 10, 10, 10,  5,  5}, //156
        {10, 10, 15, 15, 10, 10, 10, 10,  5,  5}, //157
        {10, 15, 15, 10, 10, 10, 10, 10,  5,  5}, //158
        {15, 20,  5, 10, 10, 10, 10, 10,  5,  5}, //159
        {15, 10, 15, 15, 10, 10, 10,  5,  5,  5}, //160
        {15, 15, 15, 10, 10, 10, 10,  5,  5,  5}, //161
        {20, 15, 10, 10, 10, 10, 10,  5,  5,  5}, //162
        {15, 20, 15, 10, 10, 10,  5,  5,  5,  5}, //163
        {20, 20, 10, 10, 10, 10,  5,  5,  5,  5}, //164
        {20, 20, 15, 10, 10,  5,  5,  5,  5,  5}, //165
        {20, 15, 15, 15, 10, 10,  5,  5,  5,  0}, //166
        {20, 20, 15, 10, 10, 10,  5,  5,  5,  0}, //167
        {25, 20, 10, 10, 10, 10,  5,  5,  5,  0}, //168
        {25, 20, 10, 10, 10, 10,  5,  5,  5,  0}, //169
        {25, 20, 15, 10, 10,  5,  5,  5,  5,  0}, //170
        {25, 20, 10, 15, 10, 10,  5,  5,  0,  0}, //171
        {25, 20, 15, 15, 10,  5,  5,  5,  0,  0}, //172
        {25, 25, 15, 10, 10,  5,  5,  5,  0,  0}, //173
        {25, 30, 10, 10, 10,  5,  5,  5,  0,  0}, //174
        {30, 20, 20, 10,  5,  5,  5,  5,  0,  0}, //175
        {25, 20, 25, 10, 10,  5,  5,  0,  0,  0}, //176
        {30, 20, 20, 10, 10,  5,  5,  0,  0,  0}, //177
        {30, 25, 15, 10, 10,  5,  5,  0,  0,  0}, //178
        {30, 25, 20, 10,  5,  5,  5,  0,  0,  0}, //179
        {35, 25, 20,  5,  5,  5,  5,  0,  0,  0}, //180
        {35, 30, 15, 10,  5,  5,  0,  0,  0,  0}, //181
        {35, 35, 15,  5,  5,  5,  0,  0,  0,  0}, //182
        {40, 35, 10,  5,  5,  5,  0,  0,  0,  0}, //183
        {50, 25, 10,  5,  5,  5,  0,  0,  0,  0}, //184
        {55, 25,  5,  5,  5,  5,  0,  0,  0,  0}, //185
        {50, 30, 10,  5,  5,  0,  0,  0,  0,  0}, //186
        {50, 35,  5,  5,  5,  0,  0,  0,  0,  0}, //187
        {60, 25,  5,  5,  5,  0,  0,  0,  0,  0}, //188
        {60, 25, 10,  5,  0,  0,  0,  0,  0,  0}, //189
        {55, 35, 10,  0,  0,  0,  0,  0,  0,  0}, //190
        {60, 35,  5,  0,  0,  0,  0,  0,  0,  0}, //191
        {65, 30,  5,  0,  0,  0,  0,  0,  0,  0}, //192
        {65, 35,  0,  0,  0,  0,  0,  0,  0,  0}, //193
        {75, 25,  0,  0,  0,  0,  0,  0,  0,  0}, //194
        {80, 20,  0,  0,  0,  0,  0,  0,  0,  0}, //195
        {85, 15,  0,  0,  0,  0,  0,  0,  0,  0}, //196
        {90, 10,  0,  0,  0,  0,  0,  0,  0,  0}, //197
        {95,  5,  0,  0,  0,  0,  0,  0,  0,  0}, //198
        {100, 0,  0,  0,  0,  0,  0,  0,  0,  0}, //199
    };

    public static boolean checkDistribution() {
        int lev = 141;
        for(int[] i:distribution) {
            int probabilitySum = 0;
            for(int j:i) {
                probabilitySum += j;
            }
            System.out.println("lev:" + lev++ + "probabilitySum:" + probabilitySum);
            if (probabilitySum != 100) return false;
        }
        return true;
    }

    private static int getThreshold(int[] distribution, int to) {
        if (to < 0 || to > 9) return -1;
        int ret = 0;
        for(int j = 0; j <= to; j++) {
            ret += distribution[j];
        }
        return ret;
    }

    public static int getDdukddak(int currentLev, int randomInput) throws Exception {
        if (currentLev < 141 || currentLev > 199) throw new Exception();
        if (randomInput < 0 || randomInput > 100) throw new Exception();
        int[] levDistribution = distribution[currentLev - 141];

        for (int i = 0; i < 10; i++) {
            if(randomInput < getThreshold(levDistribution, i)) return i + 1;
        }

        throw new Exception();
    }
}